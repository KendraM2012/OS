'''
Write a program to compare the performance of the LRU and the Optimal page replacement
algorithms. The program will take a reference string and the number of frames as inputs.
Assume the maximum length of a reference string is 20 and there are 5 diffent pages from
page 1 to page 5. The reference string can be randomly generated and the number of frames
is entered through the keyboard. For example, the system generates a reference string
2 1 3 4 5 2 3 ...5 and you enter the number of frames 3. Compare the number of page
faults generated by the Optimal and LRU algorithms. Print out the page replacement process
and you can see how LRU differs from the optimal.
'''
#Kendra Maggiore SP2020
import sys
import numpy as np

def LRU(framesize,pages):
    LRUframe = [] #frame for lru
    pagefault = 0
    index = dict() #dictionary
    #loops through all the pages
    for i in range(len(pages)):
        #checks if the i is in the LRUframe
        if pages[i] in LRUframe:
            #if in LRUframe update the index
            index.update({pages[i]:i})
        else:
            #if not in the LRUframe check if there is room for a page
            if len(LRUframe) < framesize:
                #if there is room add page to LRUframe and update index
                #add 1 to page fault
                LRUframe.append(pages[i])
                index.update({pages[i]:i})
                pagefault= pagefault + 1
            else:
                #else check for min key in index
                minKey = min(index, key=index.get)
                #pop the min Key from index
                index.pop(minKey)
                #remove min key from LRUframe then update LRUframe
                LRUframe.remove(minKey)
                #update the index
                index.update({pages[i]:i})
                #add page to LRUframe
                LRUframe.append(pages[i])
                #add 1 to pagefault
                pagefault = pagefault + 1
        print(LRUframe)
    print("The page fault is " +str(pagefault) + " for LRU")

def optimal(framesize,pages):
    optimalframe = [] # frame for optimal
    pagefault = 0
    #loop through pages
    for i in range(len(pages)):
        #if page is in in optimalframe
        if pages[i] not in optimalframe:
            #check if room in optimalframe if so add it
            #then add 1 to page fualt
            if len(optimalframe) < framesize:
                optimalframe.append(pages[i])
                pagefault= pagefault + 1
            else:
                #copy the current optimalframe to futurePages
                futurePages = optimalframe.copy()
                #loop though the pages till the end
                for k in pages[i:]:
                    if k in futurePages:
                        #remove the pages from futurePages until one
                        #is left that is the farthest
                        futurePages.remove(k)
                    if len(futurePages) == 1:
                        #break when only one page is left
                        break
                #remove the pages in futurePages from the optimalframe
                optimalframe.remove(futurePages[0])
                #add the new page to optimalframe
                optimalframe.append(pages[i])
                #add 1 to page fault
                pagefault= pagefault + 1
        print(optimalframe)
    print("The page fault is " +str(pagefault) + " for optimal page replacement")

def main():
    max = 20 #max numbrt of pages
    framesize = int(sys.argv[1]) # take line arg
    pages = np.random.randint(1,6,max) # create random numbers
    print(str(pages)) #print the pages
    print("optimal")
    optimal(framesize,pages) # run optimal
    print("LRU")
    LRU(framesize,pages) # run LRU

if __name__ == "__main__":
    main()
